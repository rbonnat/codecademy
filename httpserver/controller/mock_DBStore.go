// Code generated by mockery v2.0.0. DO NOT EDIT.

package controller

import (
	picture "github.com/rbonnat/codecademy/picture"
	mock "github.com/stretchr/testify/mock"
)

// MockDBStore is an autogenerated mock type for the DBStore type
type MockDBStore struct {
	mock.Mock
}

// Delete provides a mock function with given fields: _a0
func (_m *MockDBStore) Delete(_a0 string) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0
func (_m *MockDBStore) Get(_a0 string) (*picture.Picture, error) {
	ret := _m.Called(_a0)

	var r0 *picture.Picture
	if rf, ok := ret.Get(0).(func(string) *picture.Picture); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*picture.Picture)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MockDBStore) GetAll() ([]picture.Picture, error) {
	ret := _m.Called()

	var r0 []picture.Picture
	if rf, ok := ret.Get(0).(func() []picture.Picture); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]picture.Picture)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *MockDBStore) Insert(_a0 *picture.Picture) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*picture.Picture) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: _a0
func (_m *MockDBStore) Update(_a0 *picture.Picture) (int, error) {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(*picture.Picture) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*picture.Picture) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
